version: '3.9'

volumes:
  mysql:
  redis:
  qdrant:


networks:
  reverse-proxy-public:
    driver: bridge
    ipam:
      driver: default

services:
  proxy:
    image: traefik
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.mysql.address=:3306"
      - "--entrypoints.redis.address=:6379"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--api.insecure=false"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${MY_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # - "--log.level=DEBUG"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
      - "3306:3306"
      - "6379:6379"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - reverse-proxy-public

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
      TZ: "Asia/Seoul"
    volumes:
      - mysql:/var/lib/mysql
      # - ./my.cnf:/etc/mysql/conf.d/my.cnf
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.db.rule=HostSNI(`*`)"
      - "traefik.tcp.services.db.loadbalancer.server.port=3306"
      - "traefik.tcp.routers.db.entrypoints=mysql"
    networks:
      - reverse-proxy-public

  cache:
    image: redis/redis-stack-server:latest
    restart: always
    environment:
      - REDIS_ARGS=--requirepass ${REDIS_PASSWORD} --maxmemory 100mb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis:/data
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.cache.rule=HostSNI(`*`)"
      - "traefik.tcp.services.cache.loadbalancer.server.port=6379"
      - "traefik.tcp.routers.cache.entrypoints=redis"
    networks:
      - reverse-proxy-public

  api:
    image: cosogi/llmchat:230703
    restart: always
    env_file:
      - .env
    command:
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8000"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy-public"
      - "traefik.http.routers.api.rule=HostRegexp(`${HOST_MAIN}`, `{subdomain:[a-z]+}.${HOST_MAIN}`, `${HOST_IP}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.services.api.loadbalancer.server.scheme=http"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.routers.api.tls.domains[0].main=${HOST_MAIN}"
      - "traefik.http.routers.api.tls.domains[0].sans=${HOST_SUB}"
    depends_on:
      - proxy
      - db
      - cache
      - vectorstore
    volumes:
      - .:/app
    networks:
      - reverse-proxy-public

  vectorstore:
    image: qdrant/qdrant:latest
    restart: always
    volumes:
      - qdrant:/qdrant/storage
    networks:
      - reverse-proxy-public
  # search-api:
  #   image: searxng/searxng:latest
  #   restart: always

  #   environment:
  #     REDIS_PASSWORD: "${REDIS_PASSWORD}"
  #     JWT_SECRET: "${JWT_SECRET}"
  #   volumes:
  #     - ./searxng:/etc/searxng
  #   networks:
  #     - api-private
